?read.csv
location <- file.choose()
file <- read.csv(location, sep = ",")
file <- read.csv(location, sep = " ")
str(file)
dim(file)
freegeoip <- function(ip, format = ifelse(length(ip)==1,'list','dataframe'))
{
if (1 == length(ip))
{
# a single IP address
require(rjson)
url <- paste(c("http://freegeoip.net/json/", ip), collapse='')
ret <- fromJSON(readLines(url, warn=FALSE))
if (format == 'dataframe')
ret <- data.frame(t(unlist(ret)))
return(ret)
} else {
ret <- data.frame()
for (i in 1:length(ip))
{
r <- freegeoip(ip[i], format="dataframe")
ret <- rbind(ret, r)
}
return(ret)
}
}
freegeoip('38.100.62.70')
freegeoip('98.103.85.221','67.168.217.253','24.176.77.54')
freegeoip(c('98.103.85.221','67.168.217.253','24.176.77.54'))
count <- c(5,6,31,67,59,82,38,42,17,52,61)
median(count)
sum(count)
count <- c(5,6,31,63,59,82,38,42,17,52,61)
sum(count)
sum(count)/2
5+6+31+63+59
228-164
count <- count(:-1)
count(2:3)
count
count[2]
count[2:3]
count[:-1]
count[1:-1]
count[:4]
count[2,4]
count[1:4]
length(count)
count[1:length(count)-1]
count = count[1:length(count)-1]
sum(count)
median(count)
sum(count)/2
198-164
34/82
install.packages(c("boot", "choroplethr", "chron", "class", "cluster", "curl", "devtools", "DiagrammeR", "dplyr", "foreign", "goftest", "Hmisc", "htmlwidgets", "httr", "KernSmooth", "knitr", "manipulate", "maptools", "markdown", "MASS", "Matrix", "mclust", "nlme", "nnet", "PBSmapping", "plyr", "polyclip", "pryr", "R6", "Rcpp", "RCurl", "readr", "rmarkdown", "rpart", "scales", "shiny", "sp", "spatial", "stringi", "stringr", "survival", "testthat", "XML"))
uupdate.packages()
update.packages()
update.packages()
data(df_state_demographics)
library(choroplethrZip)
data(df_zip_demographics)
zip_choropleth_acs("B19301", state_zoom = "texas")
api.key.install()
zip_choropleth_acs("B19301", state_zoom = "texas", key = "4214e7a9f6c31cb8db30567b497a438d6756b1f9")
library(acs)
api.key.install()
api.key.install?
)
?api.key.install
api.key.install(key = "4214e7a9f6c31cb8db30567b497a438d6756b1f9")
zip_choropleth_acs("B19301", state_zoom = "texas")
?zip_choropleth_acs
columns(acs)
?acs
head(zip.regions)
library(choroplethrZip)
?zip.regions
head(zip.regions)
?zip
zip.regions
data(zip.regions)
head(zip.regions)
data("df_pop_zip")
zip_choropleth(df_pop_zip, state_zoom = "texas")
?zip.regions
?df_pop_zip
data(df_zip_demographics)
data(df_city_demographics)
data(df_county_demographics)
library(choroplethr)
data(df_zip_demographics)
data(df_city_demographics)
data(df_county_demographics)
columns(df_county_demographics)
names(df_county_demographics)
zip_choropleth_acs("B19301", state_zoom = "texas", endyear = 2013)
zip_choropleth_acs("B12005", state_zoom = "texas", endyear = 2013)
zip_choropleth_acs("B12005_01", state_zoom = "texas", endyear = 2013)
zip_choropleth_acs("B25061", state_zoom = "texas", endyear = 2013)
head(df_pop_zip)
df_pop_zip[region == "78758"]
df_pop_zip$region == "78758"
table(df_pop_zip$region == "78758")
df_pop_zip[df_pop_zip$region == "78758",]
df_pop_zip[df_pop_zip$region == "78753",]
names(df_county_demographics)
head(df_county_demographics)
boxplot(df_pop_zip$value)
colnames(df_county_demographics)
data(df_pop_county)
df_pop_county[df_pop_county$region == 48453, ]
county_choropleth(df_pop_county, state_zoom="texas", num_colors = 8)
zip_choropleth(df_pop_zip, county_zoom = 48453)
data(df_zip_demographics)
ensurePkg <- function(x) {
if (!require(x,character.only = TRUE)) {
install.packages(x,dep=TRUE, repos="http://cran.r-project.org")
if(!require(x,character.only = TRUE)) stop("Package not found")
}
}
ensurePkg('acs')
api.key.install('4214e7a9f6c31cb8db30567b497a438d6756b1f9')
?acs
?acs.fetch
acs.fetch(endyear = 2013, span = 5, table.number = B01003)
?acs
acs.fetch(endyear = 2013, span = 5, table.number = "B01003")
acs.fetch(endyear = 2011, span = 5, table.number = "B01003")
acs.fetch(endyear = 2012, span = 5, table.number = "B01003")
choose(5, 4)*.5^4 + choose(5, 5)*.5^5
pbinom(3, size=5,prob=.5,lower.tail = FALSE)
?pbinom
choose(5, 4)*.5^5 + choose(5, 5)*.5^5
pnorm(1, lower.tail = FALSE)
pnorm(70, mean = 80, sd = 10, lower.tail = FALSE)
pnorm(70, mean = 80, sd = 10, lower.tail = TRUE)
pnorm(1)
?pnorm
1.645*75+1100
qnorm(.95, mean = 1100, sd = 75, lower.tail = FALSE)
qnorm(95, mean = 1100, sd = 75, lower.tail = FALSE)
qnorm(.95, mean = 1100, sd = 75, lower.tail = FALSE)
qnorm(.95, mean = 1100, sd = 75, lower = FALSE)
qnorm(.95, mean = 1100, sd = 75)
1.645*75+1100
qnorm(.95, mean = 1100, sd = 7.5)
?ppois
ppois(10, lambda = 5*3)
n <- 1000
means <- cumsum(rnorm(n))/(1:n)
plot(means)
?t.test
devtools::install_github('rstudio/rmarkdown')
library(Rblpapi)
install.packages(Rblpapi)
options(scipen=999)
setwd("~/Documents/DataScience/Inferential Statistics")
# ensurePkg tests whether the package is installed and, if not, installs it.
ensurePkg <- function(x) {
if (!require(x,character.only = TRUE)) {
install.packages(x,dep=TRUE, repos="http://cran.r-project.org")
if(!require(x,character.only = TRUE)) stop("Package not found")
}
}
ensurePkg('scales')
ensurePkg('tidyr')
ensurePkg('ggplot2')
ensurePkg("dplyr")
data("ToothGrowth")
str(ToothGrowth)
head(ToothGrowth)
tail(ToothGrowth)
unique(ToothGrowth$dose)
with(ToothGrowth, table(supp, dose))
n <- 10
alpha <- 0.05
results <- ToothGrowth %>% group_by(supp, dose) %>% summarize(mean = mean(len))
print(results)
half_dose <- ToothGrowth[ToothGrowth$dose == 0.5, ]$len
half_dose
half_dose_OJ <- ToothGrowth[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "OJ", ]$len
two_dose_OJ <- ToothGrowth[ToothGrowth$dose == 2 & ToothGrowth$supp == "OJ", ]$len
half_dose_VC <- ToothGrowth[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "VC", ]$len
two_dose_VC <- ToothGrowth[ToothGrowth$dose == 2 & ToothGrowth$supp == "VC", ]$len
t.test(two_dose_OJ, half_dose_OJ, paired = TRUE, alternative = "greater")
t.test(two_dose_VC, half_dose_VC, paired = TRUE, alternative = "greater")
results
hist(half_dose_OJ)
qqnorm(half_dose_VC)
qqline(half_dose_VC)
qqnorm(half_dose_OJ)
qqnorm(two_dose_OJ)
View(ToothGrowth)
?ToothGrowth
require(graphics)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
cor(ToothGrowth$len, ToothGrowth$dose)
cor(ToothGrowth$len, ToothGrowth$dose)
unique(ToothGrowth$dose)
with(ToothGrowth, table(supp, dose))
?coplot
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
mean(half_dose_OJ)
mean(half_dose_VC)
View(results)
cor(results)
?cor
cor(results$dose, results$mean)
?cor
?mutate
grouped_results %>% mutate(cor(dose, mean))
grouped_results <- ToothGrowth %>% group_by(supp, dose) %>% summarize(mean = mean(len))
print(grouped_results)
grouped_results %>% mutate(cor(dose, mean))
cor(results[results$supp == "OJ", ]$dose, results[results$supp == "OJ", ]$mean)
cor(results[results$supp == "VC", ]$dose, results[results$supp == "VC", ]$mean)
grouped_results <- ToothGrowth %>% group_by(supp, dose) %>% summarize(len.mean = mean(len))
cor(results[results$supp == "OJ", ]$dose, results[results$supp == "OJ", ]$len.mean)
View(results)
cor(grouped_results[grouped_results$supp == "OJ", ]$dose, grouped_results[grouped_results$supp == "OJ", ]$len.mean)
cor(grouped_results[grouped_results$supp == "VC", ]$dose, grouped_results[grouped_results$supp == "VC", ]$len.mean)
grouped_results %>% mutate(cor(dose, len.mean))
grouped_cor <- cor(grouped_results[grouped_results$supp == "OJ", ]$dose, grouped_results[grouped_results$supp == "OJ", ]$len.mean)
grouped_cor <- cor(grouped_results[grouped_results$supp == "VC", ]$dose, grouped_results[grouped_results$supp == "VC", ]$len.mean)
grouped_cor
grouped_cor_OJ <- cor(grouped_results[grouped_results$supp == "OJ", ]$dose, grouped_results[grouped_results$supp == "OJ", ]$len.mean)
grouped_cor_VC <- cor(grouped_results[grouped_results$supp == "VC", ]$dose, grouped_results[grouped_results$supp == "VC", ]$len.mean)
qqnorm(half_dose_OJ)
qqline(half_dose_OJ)
shapiro.test(half_dose_OJ)
qqnorm(two_dose_OJ-half_dose_OJ)
qqline(two_dose_OJ-half_dose_OJ)
qqnorm(two_dose_OJ-half_dose_VC)
qqline(two_dose_OJ-half_dose_VC)
qplot(sample=half_dose_OJ)
qplot(sample=half_dose_VC)
shapiro.test(half_dose_OJ)
shapiro.test(two_dose_OJ)
shapiro.test(half_dose_VC)
shapiro.test(two_dose_VC)
qplot(sample=half_dose_OJ)
qplot(sample=c(half_dose_OJ,two_dose_OJ))
qplot(sample=c(half_dose_OJ,two_dose_OJ), color=sample()
)
qplot(sample=c(half_dose_OJ,two_dose_OJ), color=sample)
ggplot(sample=half_dose_OJ)
ggplot()+geom_point(sample=half_dose_OJ)
str(half_dose_OJ)
ggplot() + stat_qq(aes(sample=half_dose_OJ, color="red")) + stat_qq(aes(sample=half_dose_VC, color = "green"))
ggplot() + stat_qq(aes(sample=half_dose_OJ, color="red")) + stat_qq(aes(sample=half_dose_VC, color = type))
ggplot() + stat_qq(aes(sample=half_dose_OJ, color="red")) + stat_qq(aes(sample=half_dose_VC, color = "green"))
ggplot() + stat_qq(aes(sample=half_dose_OJ, color="red")) + stat_qq(aes(sample=half_dose_VC, color = green))
ggplot() + stat_qq(aes(sample=half_dose_OJ, color="red")) + stat_qq(aes(sample=half_dose_VC, color = "green"))
ggplot() + stat_qq(aes(sample=half_dose_OJ, color="red")) + stat_qq(aes(sample=half_dose_VC, color = half_dose_VC))
ggplot() + stat_qq(aes(sample=half_dose_OJ, color=half_dose_OJ)) + stat_qq(aes(sample=half_dose_VC, color = half_dose_VC))
ggplot() + stat_qq(aes(sample=half_dose_OJ, color="red")) + stat_qq(aes(sample=half_dose_VC, color = "green"))
qq_df <- bind_cols(half_dose_OJ, two_dose_VC, half_dose_VC, two_dose_VC)
qq_df <- cbind(half_dose_OJ, two_dose_VC, half_dose_VC, two_dose_VC)
View(qq_df)
qq_m <- cbind(half_dose_OJ, two_dose_VC, half_dose_VC, two_dose_VC)
qqplot(sample = qq_m)
rm(qq_df)
melt(qq_m)
spread(qq_m)
View(qq_m)
gather(qq_m, "dose_supp", "len")
qq_m <- data.frame(cbind(half_dose_OJ, two_dose_VC, half_dose_VC, two_dose_VC))
gather(qq_m, "dose_supp", "len")
rm(qq_m)
qq_df <- data.frame(cbind(half_dose_OJ, two_dose_VC, half_dose_VC, two_dose_VC))
qqplot(sample=len, data=qq_df, color=dose_supp)
qplot(sample=len, data=qq_df, color=dose_supp)
View(qq_df)
qq_df <- gather(qq_m, "dose_supp", "len")
qq_df <- gather(qq_df, "dose_supp", "len")
qq_df <- data.frame(cbind(half_dose_OJ, two_dose_VC, half_dose_VC, two_dose_VC))
qq_df <- gather(qq_df, "dose_supp", "len")
qplot(sample=len, data=qq_df, color=dose_supp)
ggplot(qq_df, aes(sample=y)) + geom_point(stat="len", color=supp_dose)
ggplot(qq_df, aes(sample=y)) + geom_point(stat="len", color=dose_supp)
ggplot(qq_df, aes(sample=len)) + geom_point(color=dose_supp)
View(qq_df)
ggplot(qq_df, aes(sample=len)) + statqq()
ggplot(qq_df, aes(sample=len)) + stat_qq()
ggplot(qq_df, aes(sample=len)) + stat_qq(dist=dose_supp)
ggplot() + stat_qq(qq_df, aes(sample=len), color=dose_supp)
p <- qplot(sample=len, data=qq_df, color=dose_supp)
p + scale_color_brewer(palette="Dark2") + theme_minimal()
qq_df <- data.frame(cbind(half_dose_OJ, two_dose_OJ, half_dose_VC, two_dose_VC))
qq_df <- gather(qq_df, "dose_supp", "len")
p <- qplot(sample=len, data=qq_df, color=dose_supp)
p + scale_color_brewer(palette="Dark2") + theme_minimal()
p + scale_color_brewer(palette="Dark2") + theme_minimal() + theme(size=4)
p + scale_color_brewer(palette="Dark2") + theme_minimal() + size(4)
p + scale_color_brewer(palette="Dark2") + theme_minimal() + scale_size_discrete(c(4,4))
p + scale_color_brewer(palette="Dark2") + theme_minimal() + scale_size_discrete(c(4,410))
p <- qplot(sample=len, data=qq_df, color=dose_supp, size=4)
p + scale_color_brewer(palette="Dark2") + theme_minimal()
p + scale_color_brewer(palette="Dark2")
p + scale_color_brewer(palette="Dark2") + guides(size=FALSE)
rm(list=ls())
knitr::opts_chunk$set(fig.width=9)
options(scipen=999)
setwd("~/Documents/DataScience/Inferential Statistics")
# ensurePkg tests whether the package is installed and, if not, installs it.
ensurePkg <- function(x) {
if (!require(x,character.only = TRUE)) {
install.packages(x,dep=TRUE, repos="http://cran.r-project.org")
if(!require(x,character.only = TRUE)) stop("Package not found")
}
}
ensurePkg('scales')
ensurePkg('tidyr')
ensurePkg('ggplot2')
ensurePkg('graphics')
ensurePkg("dplyr")
data("ToothGrowth")
str(ToothGrowth)
summary(ToothGrowth$len)
head(ToothGrowth)
tail(ToothGrowth)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
grouped_results <- ToothGrowth %>% group_by(supp, dose) %>% summarize(len.mean = mean(len))
print(grouped_results)
grouped_cor_OJ <- cor(grouped_results[grouped_results$supp == "OJ", ]$dose, grouped_results[grouped_results$supp == "OJ", ]$len.mean)
grouped_cor_VC <- cor(grouped_results[grouped_results$supp == "VC", ]$dose, grouped_results[grouped_results$supp == "VC", ]$len.mean)
half_dose_OJ <- ToothGrowth[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "OJ", ]$len
two_dose_OJ <- ToothGrowth[ToothGrowth$dose == 2 & ToothGrowth$supp == "OJ", ]$len
half_dose_VC <- ToothGrowth[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "VC", ]$len
two_dose_VC <- ToothGrowth[ToothGrowth$dose == 2 & ToothGrowth$supp == "VC", ]$len
qq_df <- data.frame(cbind(half_dose_OJ, two_dose_OJ, half_dose_VC, two_dose_VC))
qq_df <- gather(qq_df, "dose_supp", "len")
p <- qplot(sample=len, data=qq_df, color=dose_supp, size=4)
p + scale_color_brewer(palette="Dark2") + guides(size=FALSE)
shapiro.test(half_dose_OJ)
shapiro.test(two_dose_OJ)
shapiro.test(half_dose_VC)
shapiro.test(two_dose_VC)
unique(ToothGrowth$dose)
with(ToothGrowth, table(supp, dose))
print(results)
print(grouped_results)
n <- 10
alpha <- 0.05
var.test(half_dose_OJ, two_dose_OJ)$p.value
f_test_p <- var.test(half_dose_OJ, two_dose_OJ)$p.value
t.test(two_dose, half_dose, alternative = "greater", var.equal = TRUE)
f_test_p <-var.test(half_dose_OJ, two_dose_OJ)
f_test_p$p.value
round(f_test_p$p.value,2)
n <- 20
x_two <- mean(two_dose_OJ)
x_half <- mean(half_dose_OJ)
s_two <- sd(two_dose_OJ)
s_half <- sd(half_dose_OJ)
sp <- sqrt( ((n-1)*s_two^2 + (n-1)*s_half^2)/(2*n-2) )
t <- (x_two-x_half)/(sp*sqrt(1/n + 1/n))
source("shadenorm.R")
shadenorm(between=c(t,Inf), color="blue")
t.test(two_dose_OJ, half_dose_OJ, alternative = "greater", var.equal = TRUE)$p.value
t_test_OJ <- t.test(two_dose_OJ, half_dose_OJ, alternative = "greater", var.equal = TRUE)
t_test_OJ$p.value
t_test_OJ
t_test_OJ_CI <- t.test(two_dose_OJ, half_dose_OJ, var.equal = TRUE)
round(t_test_OJ_CI$conf.int[1],2)
round(t_test_OJ_CI$conf.int[2],2)
x_two-x_half
(9.38+16.28)/2
t_test_OJ_CI
set.seed(42)
n <- 40
lambda <- 0.2
r <- 1000
my_samples <- matrix(rexp(n*r, lambda), r)
sample_means <- apply(my_samples, 1, mean)
summary(sample_means)
se <- 1/lambda^2/n
paste("Standard error of the mean: ", se)
p <- qplot(sample=my_samples, data=my_samples)
p <- qplot(sample=data.frame(my_samples), data=my_samples)
p <- qplot(sample=data.frame(my_samples), data=data.frame(my_samples))
p + scale_color_brewer(palette="Dark2") + guides(size=FALSE)
qplot(summary=my_samples)
?qplot
qplot(sample=my_samples)
str(my_samples)
dim(my_samples)
melt(my_samples)
gather(my_samples,value)
shapiro.test(my_samples)
unlist(my_samples)
q_my_samples <- unlist(my_samples)
View(q_my_samples)
View(my_samples)
q_my_samples <- as.vector(my_samples)
p <- qplot(sample=data.frame(sample_means), data=data.frame(sample_means))
p + scale_color_brewer(palette="Dark2") + guides(size=FALSE)
qplot(sample_means)
qplot(sample=sample_means)
qplot(sample=sample_means, color="red")
qplot(sample=sample_means, color="dark red")
qplot(sample=sample_means, color="dark blue")
qplot(sample=sample_means, color="dkblue")
qplot(sample=sample_means, color="steelblue")
p
p <- qplot(sample=sample_means, data=sample_means)
qplot(sample = sample_means)
shapiro.test(sample_means)
qqplot(sample_means)
qplot(sample = sample_means)
shapiro.test(sample_means)
my_samples <- matrix(rexp(n*r, lambda), r)
sample_means <- apply(my_samples, 1, mean)
se <- 1/lambda^2/n
paste("Standard error of the mean: ", se)
ggplot(data.frame(c(my_samples)), aes(x=c.my_samples., y=..density..)) +
geom_histogram(fill="steelblue", color="grey80", size=.2, alpha=.8) +
geom_density(color="grey10", size=1) +
geom_vline(xintercept=1/lambda, linetype="dashed", color="red") +
annotate("text", size=6, hjust=0, x = 1/lambda+2, y=.1, color="red"
, label=paste("mean=",1/lambda)) +
xlab("Sample Values") +
ggtitle("Distribution of All Samples")
ggplot(data.frame(sample_means), aes(x=sample_means, y=..density..)) +
geom_histogram(fill="steelblue", color="grey80", size=.2, alpha=.8) +
geom_density(color="grey10", size=1) +
geom_vline(xintercept=mean(sample_means), linetype="dashed", color="red") +
annotate("text", size=6, hjust=0, x = mean(sample_means)+.5, y=.5, color="red"
, label=paste("mean=",round(mean(sample_means),2))) +
xlab("Sample Values") +
ggtitle("Sampling Distribution of the Mean")
lower <- mean(sample_means) - 1.96*sd(sample_means)
upper <- mean(sample_means) + 1.96*sd(sample_means)
set_check <- sum(sample_means > lower & sample_means < upper)/length(sample_means)
paste("Mean: ", round(mean(sample_means),2))
paste("Median: ", round(median(sample_means),2))
paste("Percentage of sampling means within 1.96 standard deviations: ", percent(set_check))
qplot(sample = sample_means)
shapiro.test(sample_means)
shapiro.test(my_samples)
temp <- gather(my_samples, "val")
temp <- gather(data.frame(my_samples), "val")
head(temp)
shapiro.test(temp$value)
qplot(temp$value)
shapiro.test(temp$value[3:5000])
qplot(sample_means)
shapiro.test(sample_means)
shapiro.test(half_dose_OJ)
qplot(half_dose_OJ)
qplot(half_dose_VC)
p + scale_color_brewer(palette="Dark2") + guides(size=FALSE)
p <- qplot(sample=len, data=qq_df, color=dose_supp, size=4)
p + scale_color_brewer(palette="Dark2") + guides(size=FALSE)
t_test_VC <- t.test(two_dose_VC, half_dose_VC, alternative = "greater", var.equal = TRUE)
t_test_VC
t_test_OJ
round(t_test_VC$t,2)
str(t_test_VC)
t_test_VC$t
names(t_test_VC)
round(t_test_VC$statistic,2)
t_test_VC$p.value
