?read.csv
location <- file.choose()
file <- read.csv(location, sep = ",")
file <- read.csv(location, sep = " ")
str(file)
dim(file)
freegeoip <- function(ip, format = ifelse(length(ip)==1,'list','dataframe'))
{
if (1 == length(ip))
{
# a single IP address
require(rjson)
url <- paste(c("http://freegeoip.net/json/", ip), collapse='')
ret <- fromJSON(readLines(url, warn=FALSE))
if (format == 'dataframe')
ret <- data.frame(t(unlist(ret)))
return(ret)
} else {
ret <- data.frame()
for (i in 1:length(ip))
{
r <- freegeoip(ip[i], format="dataframe")
ret <- rbind(ret, r)
}
return(ret)
}
}
freegeoip('38.100.62.70')
freegeoip('98.103.85.221','67.168.217.253','24.176.77.54')
freegeoip(c('98.103.85.221','67.168.217.253','24.176.77.54'))
count <- c(5,6,31,67,59,82,38,42,17,52,61)
median(count)
sum(count)
count <- c(5,6,31,63,59,82,38,42,17,52,61)
sum(count)
sum(count)/2
5+6+31+63+59
228-164
count <- count(:-1)
count(2:3)
count
count[2]
count[2:3]
count[:-1]
count[1:-1]
count[:4]
count[2,4]
count[1:4]
length(count)
count[1:length(count)-1]
count = count[1:length(count)-1]
sum(count)
median(count)
sum(count)/2
198-164
34/82
install.packages(c("boot", "choroplethr", "chron", "class", "cluster", "curl", "devtools", "DiagrammeR", "dplyr", "foreign", "goftest", "Hmisc", "htmlwidgets", "httr", "KernSmooth", "knitr", "manipulate", "maptools", "markdown", "MASS", "Matrix", "mclust", "nlme", "nnet", "PBSmapping", "plyr", "polyclip", "pryr", "R6", "Rcpp", "RCurl", "readr", "rmarkdown", "rpart", "scales", "shiny", "sp", "spatial", "stringi", "stringr", "survival", "testthat", "XML"))
uupdate.packages()
update.packages()
update.packages()
data(df_state_demographics)
library(choroplethrZip)
data(df_zip_demographics)
zip_choropleth_acs("B19301", state_zoom = "texas")
api.key.install()
zip_choropleth_acs("B19301", state_zoom = "texas", key = "4214e7a9f6c31cb8db30567b497a438d6756b1f9")
library(acs)
api.key.install()
api.key.install?
)
?api.key.install
api.key.install(key = "4214e7a9f6c31cb8db30567b497a438d6756b1f9")
zip_choropleth_acs("B19301", state_zoom = "texas")
?zip_choropleth_acs
columns(acs)
?acs
head(zip.regions)
library(choroplethrZip)
?zip.regions
head(zip.regions)
?zip
zip.regions
data(zip.regions)
head(zip.regions)
data("df_pop_zip")
zip_choropleth(df_pop_zip, state_zoom = "texas")
?zip.regions
?df_pop_zip
data(df_zip_demographics)
data(df_city_demographics)
data(df_county_demographics)
library(choroplethr)
data(df_zip_demographics)
data(df_city_demographics)
data(df_county_demographics)
columns(df_county_demographics)
names(df_county_demographics)
zip_choropleth_acs("B19301", state_zoom = "texas", endyear = 2013)
zip_choropleth_acs("B12005", state_zoom = "texas", endyear = 2013)
zip_choropleth_acs("B12005_01", state_zoom = "texas", endyear = 2013)
zip_choropleth_acs("B25061", state_zoom = "texas", endyear = 2013)
head(df_pop_zip)
df_pop_zip[region == "78758"]
df_pop_zip$region == "78758"
table(df_pop_zip$region == "78758")
df_pop_zip[df_pop_zip$region == "78758",]
df_pop_zip[df_pop_zip$region == "78753",]
names(df_county_demographics)
head(df_county_demographics)
boxplot(df_pop_zip$value)
colnames(df_county_demographics)
data(df_pop_county)
df_pop_county[df_pop_county$region == 48453, ]
county_choropleth(df_pop_county, state_zoom="texas", num_colors = 8)
zip_choropleth(df_pop_zip, county_zoom = 48453)
data(df_zip_demographics)
ensurePkg <- function(x) {
if (!require(x,character.only = TRUE)) {
install.packages(x,dep=TRUE, repos="http://cran.r-project.org")
if(!require(x,character.only = TRUE)) stop("Package not found")
}
}
ensurePkg('acs')
api.key.install('4214e7a9f6c31cb8db30567b497a438d6756b1f9')
?acs
?acs.fetch
acs.fetch(endyear = 2013, span = 5, table.number = B01003)
?acs
acs.fetch(endyear = 2013, span = 5, table.number = "B01003")
acs.fetch(endyear = 2011, span = 5, table.number = "B01003")
acs.fetch(endyear = 2012, span = 5, table.number = "B01003")
choose(5, 4)*.5^4 + choose(5, 5)*.5^5
pbinom(3, size=5,prob=.5,lower.tail = FALSE)
?pbinom
choose(5, 4)*.5^5 + choose(5, 5)*.5^5
pnorm(1, lower.tail = FALSE)
pnorm(70, mean = 80, sd = 10, lower.tail = FALSE)
pnorm(70, mean = 80, sd = 10, lower.tail = TRUE)
pnorm(1)
?pnorm
1.645*75+1100
qnorm(.95, mean = 1100, sd = 75, lower.tail = FALSE)
qnorm(95, mean = 1100, sd = 75, lower.tail = FALSE)
qnorm(.95, mean = 1100, sd = 75, lower.tail = FALSE)
qnorm(.95, mean = 1100, sd = 75, lower = FALSE)
qnorm(.95, mean = 1100, sd = 75)
1.645*75+1100
qnorm(.95, mean = 1100, sd = 7.5)
?ppois
ppois(10, lambda = 5*3)
n <- 1000
means <- cumsum(rnorm(n))/(1:n)
plot(means)
?t.test
setwd("~/Documents/DataScience/Inferential Statistics")
dir()
dir()
rexp(40,0.2)
rexp(40,0.2)
mean(rexp(40,0.2))
mean(rexp(40,0.2))
mean(rexp(40,0.2))
mean(rexp(40,0.2))
mean(rexp(40,0.2))
mean(rexp(40,0.2))
rep(mean(rexp(40,0.2)),10000)
?rep
rep(mean(rexp(40,0.2)),each=10)
rep(rexp(40,0.2),each=10)
rep(mean(rexp(40,0.2)),each=10)
rexp(40,0.2)
n <- 40
lambda <- 0.2
r <- 10000
my_samples <- matrix(rexp(n*r, lambda), r)
View(my_samples)
mean(my_samples[1,])
?apply
dim(my_samples)
plot(rexp(n,lambda))
plot(my_samples)
hist(my_samples)
my_samples <- matrix(rexp(n, lambda), r)
View(my_samples)
?rexp
my_samples <- matrix(rexp(n*r, lambda), r)
hist(my_samples)
summary(my_samples)
str(my_samples)
sample_means <- apply(my_samples, 1, mean)
dim(sample_means)
str(sample_means)
summary(sample_means)
hist(sample_means)
r <- 1000
my_samples <- matrix(rexp(n*r, lambda), r)
sample_means <- apply(my_samples, 1, mean)
hist(my_samples)
summary(sample_means).min
summary(sample_means).Min
min(sample_means)
summary(sample_means)
round(min(sample_means), 2)
round(min(sample_means), 3)
1/.2
1/.2^2
ensurePkg('ggplot2')
knitr::opts_chunk$set(fig.width=9)
options(scipen=999)
# ensurePkg tests whether the packages that run_analysis uses are installed and, if not, installs them.
ensurePkg <- function(x) {
if (!require(x,character.only = TRUE)) {
install.packages(x,dep=TRUE, repos="http://cran.r-project.org")
if(!require(x,character.only = TRUE)) stop("Package not found")
}
}
ensurePkg('ggplot2')
qplot(my_samples)
qplot(sample_means)
dir()
knitr::opts_chunk$set(message=FALSE)
summary(sample_means)
sample_vars <- apply(my_samples, 1, var)
summary(sample_vars)
mean(sample_means)
var(sample_vars)
stdev(sample_vars)
sd(sample_vars)
?sd
sd(my_samples)
ensurePkg('scales')
var(sample_means)
var(my_samples)
25/sqrt(n)
5/sqrt(n)
25/40
1/lambda^2/n
5/sqrt(40)
sqrt(.625)
ensurePkg('dplyr')
gather(my_samples)
?gather
ensurePkg('scales')
ensurePkg('dplyr')
ensurePkg('ggplot2')
?gather
ensurePkg('tidyr')
gather(my_samples)
gather(my_samples, "x")
c(my_samples)
?dataframe
?data.frame
temp = data.frame(c(my_samples))
str(temp)
temp = data.frame(sample_means)
View(temp)
?local
lower = 1.96
upper = 1.96
lower = -1.96
sum(sample_means > lower & sample_means < upper)/length(sample_means)
lower = mean(sample_means) - 1.96
upper = mean(sample_means) + 1.96
sum(sample_means > lower & sample_means < upper)/length(sample_means)
rm(list=ls())
ensurePkg('datasets')
ensurePkg <- function(x) {
if (!require(x,character.only = TRUE)) {
install.packages(x,dep=TRUE, repos="http://cran.r-project.org")
if(!require(x,character.only = TRUE)) stop("Package not found")
}
}
ensurePkg('datasets')
data <- data('ToothGrowth')
data()
data <- data(ToothGrowth)
data
rm(list=ls())
data("ToothGrowth")
str(ToothGrowth)
ensurePkg <- function(x) {
if (!require(x,character.only = TRUE)) {
install.packages(x,dep=TRUE, repos="http://cran.r-project.org")
if(!require(x,character.only = TRUE)) stop("Package not found")
}
}
ensurePkg('scales')
ensurePkg('tidyr')
ensurePkg('ggplot2')
ensurePkg('scales')
ensurePkg('tidyr')
ensurePkg('ggplot2')
dim(ToothGrowth)
str(ToothGrowth)
ensurePkg("dplyr")
View(ToothGrowth)
?ToothGrowth
summary(ToothGrowth$len)
head(ToothGrowth)
tail(ToothGrowth)
cor(ToothGrowth$len, ToothGrowth$dose)
names(ToothGrowth)
ggplot(ToothGrowth, aes(x=ToothGrowth$len)) +
geom_histogram(fill="steelblue", color="grey80", size=.2, alpha=.8)
ggplot(ToothGrowth, aes(x=ToothGrowth$len)) +
geom_histogram(fill="steelblue", color="grey80", size=.2, alpha=.8, binwidth=50)
ggplot(ToothGrowth, aes(x=ToothGrowth$len)) +
geom_histogram(fill="steelblue", color="grey80", size=.2, alpha=.8, binwidth=5)
ggplot(ToothGrowth, aes(x=ToothGrowth$len)) +
geom_histogram(fill="steelblue", color="grey80", size=.2, alpha=.8, binwidth=15)
ggplot(ToothGrowth, aes(x=ToothGrowth$len)) +
geom_histogram(fill="steelblue", color="grey80", size=.2, alpha=.8, binwidth=3)
ggplot(ToothGrowth, aes(x=ToothGrowth$len)) +
geom_histogram(fill="steelblue", color="grey80", size=.2, alpha=.8, binwidth=1)
ggplot(ToothGrowth, aes(x=ToothGrowth$len)) +
geom_histogram(fill="steelblue", color="grey80", size=.2, alpha=.8, binwidth=2)
lower <- mean(ToothGrowth$len) - 1.96*sd(ToothGrowth$len)
upper <- mean(ToothGrowth$len) + 1.96*sd(ToothGrowth$len)
set_check <- sum(ToothGrowth$len > lower & ToothGrowth$len < upper)/length(ToothGrowth$len)
factors(ToothGrowth$supp)
levels(ToothGrowth$dose)
levels(ToothGrowth$supp)
str(ToothGrowth)
unique(ToothGrowth$dose)
?addmargins
with(ToothGrowth, table(table(supp, dose)))
table(supp)
table(ToothGrowth$supp)
with(ToothGrowth, prop.table(table(supp, dose)))
?prop.table
with(ToothGrowth, margin.table(table(supp, dose)))
with(ToothGrowth, table(table(supp),dose))
with(ToothGrowth, table(supp, dose))
with(ToothGrowth, table(dose, supp))
with(ToothGrowth, table(supp, dose))
dose <- c(0.5, 1, 2)
supp <- c("OJ", "VC")
fill <- rep(0,6)
results <- data.frame(dose, supp, fill)
View(results)
results <- data.frame(dose, supp)
?data.frame
View(results)
View(ToothGrowth)
results <- ToothGrowth %>% group_by(supp, dose) %>% summarize(mean = mean(len))
View(results)
temp <- ToothGrowth  %>% filter(supp = 'OJ') %>% mean(len)
str(ToothGrowth)
temp <- ToothGrowth  %>% filter(supp = 'OJ')
temp <- ToothGrowth %>% filter(supp = 'OJ') %>% mean(len)
temp <- ToothGrowth %>% filter(supp = OJ) %>% mean(len)
temp <- ToothGrowth %>% dplyr::filter(supp = 'OJ') %>% mean(len)
?subset
temp <- ToothGrowth %>% subset(supp = 'OJ') %>% mean(len)
temp <- subset(ToothGrowth, supp = 'OJ')
View(temp)
mean(ToothGrowth$len[ToothGrowth$supp=="OJ"])
mean(ToothGrowth$len[ToothGrowth$supp=="VC"])
mean_half <- mean(ToothGrowth$len[ToothGrowth$dose == 0.5] )
mean_two <- mean(ToothGrowth$len[ToothGrowth$dose == 2] )
half_dose <- subset(ToothGrowth$dose == 0.5)
half_dose <- subset(ToothGrowth, dose == 0.5)
View(half_dose)
two_dose <- subset(ToothGrowth, dose == 2)
half_dose <- subset(ToothGrowth, dose == 0.5)
two_dose <- subset(ToothGrowth, dose == 2)
mean_half <- mean(half_dose$len)
mean_two <- mean(two_dose$len)
var(half_dose$len)
var(two_dose$len)
hist(half_dose$len)
hist(two_dose$len)
sd(half_dose$len)
sd(two_dose$len)
var.test(half_dose$len, two_dose$len)
var.test(ToothGrowth[ToothGrowth$dose == 0.5,]$len, ToothGrowth[ToothGrowth$dose == 2,]$len)
var.test(ToothGrowth[ToothGrowth$dose == 0.5,]$len, ToothGrowth[ToothGrowth$dose == 2,]$len)$p.value
View(half_dose)
half_dose <- ToothGrowth[ToothGrowth$dose == 0.5, ]$len
two_dose <- ToothGrowth[ToothGrowth$dose == 2, ]$len
mean(half_dose)
mean(two_dose)
rm(mean_half)
rm(mean_two)
qt(.975,df=78)
t.test(two_dose, half_dose, alternative="greater",var.equal=TRUE)
x_two <- mean(two_dose)
x_half <- mean(half_dose)
s_two <- sd(two_dose)
s_half <- sd(half_dose)
n <- 10
alpha <- 0.05
3.774^2*9
4.49976^2*9
128.1877+182.2306
310.4183/18
sqrt(17.24546)
x_two-x_half
1/10+1/10
4.15277*sqrt(0.2)
15.495/1.857175
shadenorm(between=c(8.3433,Inf))
sp <- sqrt( ((n-1)*s_two^2 + (n-1)*s_half^2)/(2*n-2) )
sp
t <- (x_two-x_half)/(sp*sqrt(1/10 + 1/10))
t
t.test(half_dose, two_dose, alternative="greater",var.equal=TRUE)
t.test(two_dose, half_dose, alternative="greater",var.equal=TRUE)
t.test(two_dose, half_dose,var.equal=TRUE)
x_two-x_half+c(-1,1)*qt(.975,18)*sp*(1/10+1/10)^.5
?qt
n <- 20
x_two <- mean(two_dose)
x_half <- mean(half_dose)
s_two <- sd(two_dose)
s_half <- sd(half_dose)
sp <- sqrt( ((n-1)*s_two^2 + (n-1)*s_half^2)/(2*n-2) )
t <- (x_two-x_half)/(sp*sqrt(1/10 + 1/10))
sp <- sqrt( ((n-1)*s_two^2 + (n-1)*s_half^2)/(2*n-2) )
t <- (x_two-x_half)/(sp*sqrt(1/n + 1/n))
?pt
pt(t, df=pmin(n, n)-1)
pt(t, df=pmin(n)-1)
pt(t, df=38)
t.test(two_dose, half_dose, alternative = "greater", var.equal = TRUE)
t.test(two_dose, half_dose, alternative = "greater", var.equal = TRUE).p-value
t.test(two_dose, half_dose, alternative = "greater", var.equal = TRUE)$p-value
t.test(two_dose, half_dose, alternative = "greater", var.equal = TRUE)$p.value
test <- t.test(two_dose, half_dose, var.equal = TRUE)
test$p.value
str(test)
test$conf.int
test$conf.int[1]
source("shadenorm.R")
shadenorm(between=c(1.96,Inf), color="black")
shadenorm(between=c(1.96,Inf), color="blue")
